package com.gallegos.vodafone.service;

import java.util.HashSet;
import java.util.List;

import org.springframework.stereotype.Service;

import com.gallegos.vodafone.model.ElementsLits;
import com.gallegos.vodafone.model.Output;

@Service
public class MissingNumberServiceImpl implements IMissingNumberService{

	@Override
	public Output calculate(ElementsLits elementsLits) {
		Output out = new Output();
		List<Integer> list = elementsLits.getElements();
		int listLength = list.size();
		
		out.setMissingNumber(findMissingNumber(list,listLength));
		out.setNumberList(list);
		
		return out;
	}

	@Override
	public Output calculateSort() {
		return null;
	}

	@Override
	public Output calculateRandom() {
		return null;
	}

	@Override
	public Output calculateFibonacci() {
		return null;
	}

	@Override
	public Output missingNumbers() {
		return null;
	}
	
	public static int findMissingNumber(List<Integer> list, int n) {
		HashSet<Integer> hashSet = new HashSet<>(); 
		      // Add all elements of array to hashset
		    for (int i = 0; i < n-1; i++) {
		        hashSet.add(list.get(i));
		    }
		 
		    // Check each integer from 1 to n
		    for (int i = 1; i <= n; i++) {
		        // If integer is not in hashset, it is the missing integer
		        if (!hashSet.contains(i)) {
		            return i;
		        }
		    }
		 
		    // If no integer is missing, return n+1
		    return n+1;
	}
	

}
